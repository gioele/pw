#!/bin/sh

set -u
set -e

LIB_DIR="`dirname $0`/../lib/pw"

. "${LIB_DIR}/configuration.sh"
. "${LIB_DIR}/functions.sh"

help () {
	cat <<-EOD
	Usage: pw-autotype [OPTION] HANDLE
	Autotype the password for entry HANDLE.

	  -d, --db FILE     Use FILE as the password database
	  -l, --label-only  Search only in labels, equivalent to --search-field=Label
	  -s, --search-field FIELD  Search only in the specified field

	  -h, --help        Display this help and exit

	HANDLE can be a label or a regexp matching the whole label.
	EOD
	exit
}

pw_show_opts=''
pattern=''

options=$(getopt --name pw-autotype -o d:ls:h -l db:,label-only,search-field:,help -- "$@") || help
eval set -- "$options"

while [ $# -gt 0 ] ; do
	case "$1" in
		-d|--db) pw_show_opts="$pw_show_opts -d '$2'" ; shift ;;
		-l|--label-only) pw_show_opts="$pw_show_opts -l" ;;
		-s|--search-field) pw_show_opts="$pw_show_opts -s '$2'" ; shift ;;
		-h|--help) help ;;
		--) shift ; break ;;
		*) break ;;
	esac
	shift
done
[ $# -ne 0 ] && pattern=$1

check_args () {
	[ -n "$pattern" ] || {
		error_pw "The HANDLE of the entry to be autotyped has not been provided."
		exit 1
	}
}

check_args

data=$(`dirname $0`/pw-show -f 'Auto-Type' $pw_show_opts $pattern)
commands=$(printf '%s\n' "$data" | sed -e 's/\({[^}]\+}\)/\1\n/g' | sed -e 's/\(.\){/\1\n{/')

gui_send_key alt+Tab # FIXME: read Auto-Type-Window field

printf '%s' "$commands" | while IFS= read -r cmd ; do
	is_command=`case "$cmd" in {*) echo 'true' ;; *) echo 'false' ;; esac`

	if ! $is_command ; then
		gui_type "$cmd"
		continue
	fi

	request=$(printf '%s\n' "$cmd" | sed -e 's/.\(.*\)./\1/')

	case "$request" in
		ENTER) gui_send_key Return ;;
		TAB) gui_send_key Tab ;;
		USERNAME) gui_type $(`dirname $0`/pw-show -f "User" $pw_show_opts $pattern) ;;
		PASSWORD) gui_type $(`dirname $0`/pw-show $pw_show_opts $pattern) ;;
	 	FIELD-*)
			field=${request#FIELD-}
			gui_type $(`dirname $0`/pw-show -f "$field" $pattern)
			;;
	esac
done

# This is free software released into the public domain (CC0 license).
