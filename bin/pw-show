#!/bin/sh

set -u
set -e

LIB_DIR="`dirname $0`/../lib/pw"

. "${LIB_DIR}/configuration.sh"
. "${LIB_DIR}/functions.sh"

help () {
	cat <<-EOD
	Usage: pw-show [OPTION] [PATTERN]
	Show the password for the first entry that matches PATTERN, or all passwords if no PATTERN is given.

	  -a, --all         Show all entries that match PATTERN
	  -c, --complete    Display all data, not just the password
	  -d, --db FILE     Use FILE as the password database
	  -f, --field FIELD Show only the specified FIELD
	  -l, --label-only  Search only in labels, equivalent to --search-field=Label
	  -s, --search-field FIELD  Search only in the specified field

	  -h, --help        Display this help and exit

	PATTERN is a grep's basic regexp.
	EOD
	exit
}

opt_show_all=false
opt_complete_output=false
show_field=''
search_field=''
pattern=''

options=$(getopt --name pw-show -o acd:f:ls:h -l all,complete,db,field:,label-only,search-field:,help -- "$@") || help
eval set -- "$options"

while [ $# -gt 0 ] ; do
	case "$1" in
		-a|--all) opt_show_all=true ;;
		-c|--complete) opt_complete_output=true ;;
		-d|--db) DB="$2" ; shift ;;
		-f|--field) show_field="$2" ; shift ;;
		-l|--label-only) search_field='Label' ;;
		-s|--search-field) search_field="$2" ; shift ;;
		-h|--help) help ;;
		--) shift ; break ;;
		*) break ;;
	esac
	shift
done
[ $# -ne 0 ] && pattern=$1
[ -z "$pattern" ] && opt_show_all=true

check_args () {
	if [ -n "$search_field" -a -z "$pattern" ] ; then
		echo "ERROR: requested to search in field \`\`$search_field'' but no PATTERN specified." >&2
		exit 1
	fi

	if [ -n "$show_field" ] && $opt_complete_output ; then
		echo "ERROR: requested to show only field \`\`$show_field'' but also all fields." >&2
		exit 1
	fi
}

check_args

db_cmd="cat '$DB'"
if [ "$search_field" = 'Label' ] ; then
	db_cmd="$db_cmd | grep ':${pattern}:'"
fi

[ ! -d "$DB" ] || {
	echo "ERROR: the password database \`\`$DB'' is not a file." >&2
	exit 1
}

[ -e "$DB" ] || {
	echo "ERROR: the password database \`\`$DB'' does not exist." >&2
	echo "Use \`\`pw-insert -d $DB'' to create it." >&2
	exit 1
}

match_found=false

eval $db_cmd | while IFS= read -r line ; do
	version=$(echo $line | cut -d: -f1)
	label=$(echo $line | cut -d: -f2)
	blob=$(echo $line | cut -d: -f3)
	id=$(echo $line | cut -d: -f4)

	data=$(printf '%s' $blob | base64_d_pw | gpg_decrypt ; printf 'x') || {
		echo "ERROR: Cannot decrypt the entry at $DB:$id (gpg exited with error code $?)." >&2
		echo "Remove the broken entry with \`\`pw-edit -d $DB -r $id''." >&2
		continue
	}
	data=${data%x}

	fields=$(echo "$data" | tail -n +2)
	all_fields=$(printf '%s\n%s\n%s' "ID: $id" "Label: $label" "$fields")

	field_matched=false
	echo "$all_fields" | while IFS= read -r field ; do
		if [ -z "$pattern" ] || matches_field "$pattern" "$field" "$search_field" ; then
			exit 1
		fi
	done || field_matched=true

	if ! $field_matched ; then
		continue
	fi

	password=$(echo "$data" | head -n 1)
	field="$password"

	if [ -n "$show_field" ] ; then
		field=$(printf '%s\n' "$data" | grep "^${show_field}:" | cut -d' ' -f2-)
	fi

	if $opt_complete_output ; then
		printf '%s\n%s\n' "ID: $id" "Label: $label"
		printf '%s' "$data"
	else
		if $opt_show_all ; then
			printf '%s\t%s' "$id" "$field"
		else
			printf '%s' "$field"
			is_output_interactive && printf '\n'
		fi
	fi

	if ! $opt_show_all ; then
		exit 1
	fi

	printf '\n'
done || match_found=true

if [ -n "$pattern" ] && ! $match_found ; then
	exit 1
fi

# This is free software released into the public domain (CC0 license).
