#!/bin/sh

set -u
set -e

LIB_DIR="`dirname $0`/../lib/pw"

. "${LIB_DIR}/configuration.sh"
. "${LIB_DIR}/functions.sh"

check_config () {
	[ "${GPG_KEY-unset}" != "unset" ] || {
		echo "ERROR: GPG_KEY not set" >&2
		echo "Set GPG_KEY in $CONFIG_FILE" >&2
		return 1
	}
}

help () {
	cat <<-EOD
		Usage: pw-insert [OPTION] [LABEL]"
		Add a new entry to the password store.

		  -b, --batch          Perform the task unattended
		  -d, --db FILE        Use FILE as the password database
		  -t, --template FILE  Use FILE as the template

		  -h, --help       Display this help and exit
	EOD
	exit
}

opt_batch=false
opt_use_template=false
label=''

options=$(getopt --name pw-insert -o bd:t:h -l batch,db:,template:,help -- "$@") || help
eval set -- "$options"

while [ $# -gt 0 ] ; do
	case "$1" in
		-b|--batch) opt_batch=true ;;
		-d|--db) DB=$2 ; shift ;;
		-t|--template) opt_use_template=true ; template_file=$2 ; shift ;;
		-h|--help) help ;;
		--) shift ; break ;;
		*) break ;;
	esac
	shift
done
[ $# -ne 0 ] && label=$1

check_config

[ -z "$label" ] || ! grep -q ":${label}:" "$DB" 2>/dev/null || {
	echo "ERROR: there is already an entry with label \`\`${label}''" >&2
	exit 1
}

random_pass=$(env LC_CTYPE=C tr -dc 'a-zA-Z0-9!$%^&*(){}[]:.' < /dev/urandom | head -c16)
file=$(mktemp_pw)
eval $(auto_rm_cmd "$file")

if $opt_use_template ; then
	cat $template_file > $file
else
	cat > $file <<-EOM

		# ^^^^ Insert your password as the first line of the file ^^^^
		#
		# Here is a suggestion:
		# $random_pass
		#
		# You can add other fields, one per line. For example:
		#
		# User: mel
		# URL: https://example.org/login
		#
		# Blank lines and lines starting with '#' are ignored
	EOM
fi

orig_date=$(date -r $file +%s)

if ! $opt_batch ; then
	$EDITOR $file || {
		echo "ERROR: something went wrong while editing \`\`$file'' with \`\`$EDITOR''"
	}
fi

data=$(cat $file | grep -v '^\(#\|$\)') || {
	echo "No data entered, quitting." >&2
	exit 1
}

mod_date=$(date -r $file +%s)

if ! $opt_batch && [ "$orig_date" = "$mod_date" ] ; then
	echo "No data changed, quitting." >&2
	exit 1
fi

version="1p"

blob=$(echo "$data" | gpg_encrypt $GPG_KEY | base64_pw)
[ -z "$blob" ] && {
	echo "ERROR: Cannot encrypt entry." >&2
	exit 1
}

id=$(echo "$version:$label:$blob" | sha1_pw | cut -d' ' -f1)

[ -f "$DB" ] || {
	echo "Password store $DB not found, creating..."
	mkdir -p `dirname "$DB"`
	touch "$DB"
}

echo "$version:$label:$blob:$id" >> $DB

# This is free software released into the public domain (CC0 license).
